*** NOTE *** this is built out of a series of git patches,
with the patches hand-applied as needed due to minor text
formatting changes (eg date formats in deleted $Id$ lines).
I also disabled a version test (not a nice thing to do but
necessary).

The git patches are:

    From d82997d02ed6cf8e38157378b17dbaba07b91206 Mon Sep 17 00:00:00 2001
    From: TJ Saunders <tj@castaglia.org>
    Date: Sun, 18 May 2014 23:36:37 -0700
    Subject: [PATCH] Stylistic nit; no functional change.

    ---
     src/main.c | 5 ++---
     1 file changed, 2 insertions(+), 3 deletions(-)

    From c0f20268a41f5dc5c164df1b1b0ac16f342ab51f Mon Sep 17 00:00:00 2001
    From: TJ Saunders <tj@castaglia.org>
    Date: Sat, 18 Jul 2015 09:38:30 -0700
    Subject: [PATCH] Add new Netaddr API functions for clearing specific cached IP addresses, DNS names, as opposed to entire caches.

    ---
     include/netaddr.h   | 14 +++++++++-----
     src/ftpdctl.c       | 11 +++++++----
     src/netaddr.c       | 18 ++++++++++++++----
     tests/api/netaddr.c | 10 ++++------
     4 files changed, 34 insertions(+), 19 deletions(-)

    From c590d84c7018aa7714dbc9c342a66690402e2cdb Mon Sep 17 00:00:00 2001
    From: TJ Saunders <tj@castaglia.org>
    Date: Sat, 28 Nov 2015 21:49:19 -0800
    Subject: [PATCH] Bug#4104 - Handle MasqueradeAddress resolution errors due to
     startup sequences.

    ---
     contrib/mod_dynmasq.c | 44 ++++++++++++++++++++------------------------
     modules/mod_core.c    | 40 ++++++++++++++++++++++++++++++----------
     src/dirtree.c         | 12 ++++++++++--
     src/display.c         | 11 +++++++++--
     src/main.c            | 22 ++++++++++++++++++----
     src/netaddr.c         | 11 +++++++++++
     src/session.c         | 34 +++++++++++++++++++++++++++++-----
     7 files changed, 127 insertions(+), 47 deletions(-)

---
--- contrib/mod_dynmasq.c.orig
+++ contrib/mod_dynmasq.c
@@ -2,7 +2,7 @@
  * ProFTPD: mod_dynmasq -- a module for dynamically updating MasqueradeAddress
  *                         configurations, as when DynDNS names are used
  *
- * Copyright (c) 2004-2013 TJ Saunders
+ * Copyright (c) 2004-2015 TJ Saunders
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
@@ -23,10 +23,8 @@
  * resulting executable, without including the source code for OpenSSL in the
  * source distribution.
  *
- * This is mod_dynmasq, contrib software for proftpd 1.2.x and above.
+ * This is mod_dynmasq, contrib software for proftpd 1.3.x and above.
  * For more information contact TJ Saunders <tj@castaglia.org>.
- *
- * $Id: mod_dynmasq.c,v 1.11 2013-10-13 22:51:36 castaglia Exp $
  */
 
 #include "conf.h"
@@ -35,11 +33,11 @@
 # include "mod_ctrls.h"
 #endif
 
-#define MOD_DYNMASQ_VERSION		"mod_dynmasq/0.4"
+#define MOD_DYNMASQ_VERSION		"mod_dynmasq/0.5"
 
 /* Make sure the version of proftpd is as necessary. */
-#if PROFTPD_VERSION_NUMBER < 0x0001030201
-# error "ProFTPD 1.3.2rc1 or later required"
+#if 0 && PROFTPD_VERSION_NUMBER < 0x0001030602
+# error "ProFTPD 1.3.6rc2 or later required"
 #endif
 
 extern xaset_t *server_list;
@@ -55,33 +53,33 @@
 static void dynmasq_refresh(void) {
   server_rec *s;
 
-  /* Clear the netaddr cache.  Sadly, this is required in order for any
-   * updates to be discovered this way.
-   */
-  pr_netaddr_clear_cache();
-
   pr_log_debug(DEBUG2, MOD_DYNMASQ_VERSION
     ": resolving all MasqueradeAddress directives (could take a little while)");
 
   for (s = (server_rec *) server_list->xas_list; s; s = s->next) {
-    config_rec *c = find_config(s->conf, CONF_PARAM, "MasqueradeAddress",
-      FALSE);
-
-    if (c) {
-      pr_netaddr_t *na = pr_netaddr_get_addr(s->pool, c->argv[1], NULL);
+    config_rec *c;
 
-      if (na) {
+    c = find_config(s->conf, CONF_PARAM, "MasqueradeAddress", FALSE);
+    if (c != NULL) {
+      const char *masq_addr;
+      pr_netaddr_t *na;
+
+      masq_addr = c->argv[1];
+
+      pr_netaddr_clear_ipcache(masq_addr);
+      na = pr_netaddr_get_addr(s->pool, masq_addr, NULL);
+      if (na != NULL) {
         /* Compare the obtained netaddr with the one already present.
          * Only update the "live" netaddr if they differ.
          */
         pr_log_debug(DEBUG2, MOD_DYNMASQ_VERSION
-          ": resolved MasqueradeAddress '%s' to IP address %s",
-          (const char *) c->argv[1], pr_netaddr_get_ipstr(na));
+          ": resolved MasqueradeAddress '%s' to IP address %s", masq_addr,
+          pr_netaddr_get_ipstr(na));
 
         if (pr_netaddr_cmp(c->argv[0], na) != 0) {
           pr_log_pri(PR_LOG_DEBUG, MOD_DYNMASQ_VERSION
             ": MasqueradeAddress '%s' updated for new address %s (was %s)",
-            (const char *) c->argv[1], pr_netaddr_get_ipstr(na),
+            masq_addr, pr_netaddr_get_ipstr(na),
             pr_netaddr_get_ipstr(c->argv[0]));
 
           /* Overwrite the old netaddr pointer.  Note that this constitutes
@@ -92,14 +90,12 @@
 
         } else {
           pr_log_debug(DEBUG2, MOD_DYNMASQ_VERSION
-            ": MasqueradeAddress '%s' has not changed addresses",
-            (const char *) c->argv[1]);
+            ": MasqueradeAddress '%s' has not changed addresses", masq_addr);
         }
  
       } else {
         pr_log_pri(PR_LOG_NOTICE, MOD_DYNMASQ_VERSION
-          ": unable to resolve '%s', keeping previous address",
-          (const char *) c->argv[1]);
+          ": unable to resolve '%s', keeping previous address", masq_addr);
       }
     }
   }
--- include/netaddr.h.orig
+++ include/netaddr.h
@@ -1,6 +1,6 @@
 /*
  * ProFTPD - FTP server daemon
- * Copyright (c) 2003-2013 The ProFTPD Project team
+ * Copyright (c) 2003-2015 The ProFTPD Project team
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
@@ -22,9 +22,7 @@
  * OpenSSL in the source distribution.
  */
 
-/* Network address API
- * $Id: netaddr.h,v 1.36 2013-12-23 17:53:42 castaglia Exp $
- */
+/* Network address API */
 
 #ifndef PR_NETADDR_H
 #define PR_NETADDR_H
@@ -420,9 +418,15 @@
 const char *pr_netaddr_get_sess_remote_name(void);
 void pr_netaddr_set_sess_addrs(void);
 
-/* Clears the cache of netaddr objects. */
+/* Clears the cache of ALL netaddr objects. */
 void pr_netaddr_clear_cache(void);
 
+/* Clears the cached DNS names, given an IP address string. */
+void pr_netaddr_clear_dnscache(const char *ip_addr);
+
+/* Clears the cached IP addresses, given a DNS name. */
+void pr_netaddr_clear_ipcache(const char *name);
+
 /* Validates the DNS name returned. */
 char *pr_netaddr_validate_dns_str(char *);
 
--- modules/mod_core.c.orig
+++ modules/mod_core.c
@@ -855,6 +855,7 @@
 
 MODRET set_masqueradeaddress(cmd_rec *cmd) {
   config_rec *c = NULL;
+  const char *name;
   pr_netaddr_t *masq_addr = NULL;
   unsigned int addr_flags = PR_NETADDR_GET_ADDR_FL_INCL_DEVICE;
 
@@ -864,11 +865,18 @@
   /* We can only masquerade as one address, so we don't need to know if the
    * given name might map to multiple addresses.
    */
-  masq_addr = pr_netaddr_get_addr2(cmd->server->pool, cmd->argv[1], NULL,
-    addr_flags);
+  name = cmd->argv[1];
+  masq_addr = pr_netaddr_get_addr2(cmd->server->pool, name, NULL, addr_flags);
   if (masq_addr == NULL) {
-    return PR_ERROR_MSG(cmd, NULL, pstrcat(cmd->tmp_pool, cmd->argv[0],
-      ": unable to resolve \"", cmd->argv[1], "\"", NULL));
+
+    /* If the requested name cannot be resolved because it is not known AT
+     * THIS TIME, then do not fail to start the server.  We will simply try
+     * again later (Bug#4104).
+     */
+    if (errno != ENOENT) {
+      CONF_ERROR(cmd, pstrcat(cmd->tmp_pool, "unable to resolve '", name, "'",
+        NULL));
+    }
   }
 
   c = add_config_param(cmd->argv[0], 2, (void *) masq_addr, NULL);
@@ -3492,14 +3500,18 @@
       c = find_config(main_server->conf, CONF_PARAM, "MasqueradeAddress",
         FALSE);
       if (c != NULL) {
-        addrstr = (char *) pr_netaddr_get_ipstr(c->argv[0]);
+        if (c->argv[0] != NULL) {
+          addrstr = (char *) pr_netaddr_get_ipstr(c->argv[0]);
+        }
       }
     }
 
   } else {
     c = find_config(main_server->conf, CONF_PARAM, "MasqueradeAddress", FALSE);
     if (c != NULL) {
-      addrstr = (char *) pr_netaddr_get_ipstr(c->argv[0]);
+      if (c->argv[0] != NULL) {
+        addrstr = (char *) pr_netaddr_get_ipstr(c->argv[0]);
+      }
     }
   }
 
@@ -3635,14 +3647,18 @@
       c = find_config(main_server->conf, CONF_PARAM, "MasqueradeAddress",
         FALSE);
       if (c != NULL) {
-        listen_addr = c->argv[0];
+        if (c->argv[0] != NULL) {
+          listen_addr = c->argv[0];
+        }
       }
     }
 
   } else {
     c = find_config(main_server->conf, CONF_PARAM, "MasqueradeAddress", FALSE);
     if (c != NULL) {
-      listen_addr = c->argv[0];
+      if (c->argv[0] != NULL) {
+        listen_addr = c->argv[0];
+      }
     }
   }
  
@@ -3925,14 +3941,18 @@
       c = find_config(main_server->conf, CONF_PARAM, "MasqueradeAddress",
         FALSE);
       if (c != NULL) {
-        listen_addr = c->argv[0];
+        if (c->argv[0] != NULL) {
+          listen_addr = c->argv[0];
+        }
       }
     }
 
   } else {
     c = find_config(main_server->conf, CONF_PARAM, "MasqueradeAddress", FALSE);
     if (c != NULL) {
-      listen_addr = c->argv[0];
+      if (c->argv[0] != NULL) {
+        listen_addr = c->argv[0];
+      }
     }
   }
 
--- src/main.c.orig
+++ src/main.c
@@ -191,11 +191,17 @@
       pr_netaddr_get_ipstr(session.c->local_addr) :
       main_server->ServerAddress;
 
-    if ((c = find_config(main_server->conf, CONF_PARAM, "MasqueradeAddress",
-        FALSE)) != NULL) {
+    c = find_config(main_server->conf, CONF_PARAM, "MasqueradeAddress", FALSE);
+    if (c != NULL) {
+      pr_netaddr_t *masq_addr = NULL;
 
-      pr_netaddr_t *masq_addr = (pr_netaddr_t *) c->argv[0];
-      serveraddress = pr_netaddr_get_ipstr(masq_addr);
+      if (c->argv[0] != NULL) {
+        masq_addr = c->argv[0];
+      }
+
+      if (masq_addr != NULL) {
+        serveraddress = pr_netaddr_get_ipstr(masq_addr);
+      }
     }
 
     time(&now);
@@ -1280,8 +1286,15 @@
       c = find_config(main_server->conf, CONF_PARAM, "MasqueradeAddress",
         FALSE);
       if (c != NULL) {
-        pr_netaddr_t *masq_addr = (pr_netaddr_t *) c->argv[0];
-        serveraddress = pr_netaddr_get_ipstr(masq_addr);
+        pr_netaddr_t *masq_addr = NULL;
+
+        if (c->argv[0] != NULL) {
+          masq_addr = c->argv[0];
+        }
+
+        if (masq_addr != NULL) {
+          serveraddress = pr_netaddr_get_ipstr(masq_addr);
+        }
       }
 
       reason = sreplace(permanent_pool, shutmsg,
--- src/netaddr.c.orig
+++ src/netaddr.c
@@ -1,6 +1,6 @@
 /*
  * ProFTPD - FTP server daemon
- * Copyright (c) 2003-2014 The ProFTPD Project team
+ * Copyright (c) 2003-2015 The ProFTPD Project team
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
@@ -22,9 +22,7 @@
  * OpenSSL in the source distribution.
  */
 
-/* Network address routines
- * $Id: netaddr.c,v 1.98 2013-12-23 17:53:42 castaglia Exp $
- */
+/* Network address routines */
 
 #include "conf.h"
 
@@ -622,6 +620,10 @@
               "unable to resolve '%s' to an IPv6 address: %s", name,
               pr_gai_strerror(res));
 
+            if (res == EAI_NONAME) {
+              xerrno = ENOENT;
+            }
+
           } else {
             pr_trace_msg(trace_channel, 1,
               "IPv6 getaddrinfo '%s' system error: [%d] %s", name,
@@ -632,10 +634,17 @@
       } else {
         pr_trace_msg(trace_channel, 1, "IPv4 getaddrinfo '%s' error: %s",
           name, pr_gai_strerror(res));
+
+        if (res == EAI_NONAME) {
+          xerrno = ENOENT;
+        }
       }
 #else
       pr_trace_msg(trace_channel, 1, "IPv4 getaddrinfo '%s' error: %s",
         name, pr_gai_strerror(res));
+      if (res == EAI_NONAME) {
+        xerrno = ENOENT;
+      }
 #endif /* PR_USE_IPV6 */
 
     } else {
@@ -2278,6 +2287,18 @@
   }
 }
 
+void pr_netaddr_clear_dnscache(const char *ip_str) {
+  if (netaddr_dnstab != NULL) {
+    (void) pr_table_remove(netaddr_dnstab, ip_str, NULL);
+  }
+}
+
+void pr_netaddr_clear_ipcache(const char *name) {
+  if (netaddr_iptab != NULL) {
+    (void) pr_table_remove(netaddr_iptab, name, NULL);
+  }
+}
+
 void init_netaddr(void) {
   if (netaddr_pool) {
     pr_netaddr_clear_cache();
--- src/dirtree.c.orig
+++ src/dirtree.c
@@ -3478,9 +3478,17 @@
 
     c = find_config(s->conf, CONF_PARAM, "MasqueradeAddress", FALSE);
     if (c != NULL) {
+      const char *masq_addr;
+
+      if (c->argv[0] != NULL) {
+        masq_addr = pr_netaddr_get_ipstr(c->argv[0]);
+
+      } else {
+        masq_addr = c->argv[1];
+      }
+
       pr_log_pri(PR_LOG_INFO, "%s:%d masquerading as %s",
-        pr_netaddr_get_ipstr(s->addr), s->ServerPort,
-        pr_netaddr_get_ipstr((pr_netaddr_t *) c->argv[0]));
+        pr_netaddr_get_ipstr(s->addr), s->ServerPort, masq_addr);
     }
 
     /* Honor the DefaultServer directive only if SocketBindTight is not
--- src/ftpdctl.c.orig
+++ src/ftpdctl.c
@@ -1,6 +1,6 @@
 /*
  * ProFTPD - FTP server daemon
- * Copyright (c) 2001-2013 The ProFTPD Project team
+ * Copyright (c) 2001-2015 The ProFTPD Project team
  *  
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
@@ -22,9 +22,7 @@
  * the source code for OpenSSL in the source distribution.
  */
 
-/* ProFTPD Controls command-line client
- * $Id: ftpdctl.c,v 1.20 2013-07-16 21:36:49 castaglia Exp $
- */
+/* ProFTPD Controls command-line client */
 
 #include "conf.h"
 #include "privs.h"
@@ -123,6 +121,11 @@
   return NULL;
 }
 
+void *pr_table_remove(pr_table_t *tab, const char *k, size_t *sz) {
+  errno = EPERM;
+  return NULL;
+}
+
 int pr_table_set(pr_table_t *tab, const char *k, void *v, size_t sz) {
   errno = EPERM;
   return -1;
--- src/display.c.orig
+++ src/display.c
@@ -257,8 +257,15 @@
 
   c = find_config(main_server->conf, CONF_PARAM, "MasqueradeAddress", FALSE);
   if (c) {
-    pr_netaddr_t *masq_addr = (pr_netaddr_t *) c->argv[0];
-    serverfqdn = pr_netaddr_get_dnsstr(masq_addr);
+    pr_netaddr_t *masq_addr = NULL;
+
+    if (c->argv[0] != NULL) {
+      masq_addr = c->argv[0];
+    }
+
+    if (masq_addr != NULL) {
+      serverfqdn = pr_netaddr_get_dnsstr(masq_addr);
+    }
   }
 
   /* "Stringify" the file number for this session. */
--- src/session.c.orig
+++ src/session.c
@@ -1,6 +1,6 @@
 /*
  * ProFTPD - FTP server daemon
- * Copyright (c) 2009-2013 The ProFTPD Project team
+ * Copyright (c) 2009-2015 The ProFTPD Project team
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
@@ -20,8 +20,6 @@
  * copyright holders give permission to link this program with OpenSSL, and
  * distribute the resulting executable, without including the source code for
  * OpenSSL in the source distribution.
- *
- * $Id: session.c,v 1.16 2013-08-25 21:16:39 castaglia Exp $
  */
 
 #include "conf.h"
@@ -257,8 +255,34 @@
 
   masq = find_config(s->conf, CONF_PARAM, "MasqueradeAddress", FALSE);
   if (masq != NULL) {
-    pr_netaddr_t *masq_addr = (pr_netaddr_t *) masq->argv[0];
-    serveraddress = pr_netaddr_get_ipstr(masq_addr);
+    pr_netaddr_t *masq_addr = NULL;
+
+    if (masq->argv[0] != NULL) {
+      masq_addr = masq->argv[0];
+
+    } else {
+      const char *name;
+
+      /* Here we do a delayed lookup, to see if the configured name
+       * can be resolved yet (e.g. the network is now up); see Bug#4104.
+       */
+
+      name = masq->argv[1];
+      masq_addr = pr_netaddr_get_addr(session.pool, name, NULL);
+      if (masq_addr != NULL) {
+        /* Stash the resolved pr_netaddr_t in the config_rec, so that other
+         * code paths will find it (within this session process).
+         */
+        masq->argv[0] = masq_addr;
+
+      } else {
+        pr_log_debug(DEBUG5, "unable to resolve '%s'", name);
+      }
+    }
+
+    if (masq_addr != NULL) {
+      serveraddress = pr_netaddr_get_ipstr(masq_addr);
+    }
   }
 
   c = find_config(s->conf, CONF_PARAM, "ServerIdent", FALSE);
--- tests/api/netaddr.c.orig
+++ tests/api/netaddr.c
@@ -1,6 +1,6 @@
 /*
  * ProFTPD - FTP server testsuite
- * Copyright (c) 2008-2014 The ProFTPD Project team
+ * Copyright (c) 2008-2015 The ProFTPD Project team
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
@@ -22,9 +22,7 @@
  * OpenSSL in the source distribution.
  */
 
-/* NetAddr API tests
- * $Id: netaddr.c,v 1.13 2014-01-27 18:31:35 castaglia Exp $
- */
+/* NetAddr API tests */
 
 #include "tests.h"
 
@@ -350,7 +348,7 @@
   fail_unless(strcmp(res, "") == 0, "Expected '%s', got '%s'", "", res);
 
   /* We need to clear the netaddr internal cache as well. */
-  pr_netaddr_clear_cache();
+  pr_netaddr_clear_ipcache(ip);
   addr = pr_netaddr_get_addr(p, ip, NULL);
   fail_unless(addr != NULL, "Failed to get addr for '%s': %s", ip,
     strerror(errno));
@@ -418,7 +416,7 @@
   fail_unless(strcmp(res, "") == 0, "Expected '%s', got '%s'", "", res);
 
   /* We need to clear the netaddr internal cache as well. */
-  pr_netaddr_clear_cache();
+  pr_netaddr_clear_ipcache(ip);
   addr = pr_netaddr_get_addr(p, ip, NULL);
   fail_unless(addr != NULL, "Failed to get addr for '%s': %s", ip,
     strerror(errno));
