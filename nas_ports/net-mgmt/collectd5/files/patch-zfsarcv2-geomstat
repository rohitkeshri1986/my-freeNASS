--- configure.ac.orig	2015-10-14 06:04:38.148531000 -0700
+++ configure.ac	2015-10-14 06:07:31.357895000 -0700
@@ -5170,6 +5170,7 @@
 plugin_entropy="no"
 plugin_ethstat="no"
 plugin_fscache="no"
+plugin_geom_stat="no"
 plugin_interface="no"
 plugin_ipmi="no"
 plugin_ipvs="no"
@@ -5197,6 +5198,7 @@
 plugin_vserver="no"
 plugin_wireless="no"
 plugin_zfs_arc="no"
+plugin_zfs_arc_v2="no"
 plugin_zookeeper="no"
 
 # Linux
@@ -5268,6 +5270,8 @@
 then
 	plugin_disk="yes"
         plugin_zfs_arc="yes"
+        plugin_zfs_arc_v2="yes"
+		plugin_geom_stat="yes"
 fi
 
 
@@ -5295,6 +5299,7 @@
 	plugin_processes="yes"
 	plugin_uptime="yes"
 	plugin_zfs_arc="yes"
+	plugin_zfs_arc_v2="yes"
 fi
 
 if test "x$with_devinfo$with_kstat" = "xyesyes"
@@ -5558,6 +5563,7 @@
 AC_PLUGIN([fhcount],     [yes],                [File handles statistics])
 AC_PLUGIN([filecount],   [yes],                [Count files in directories])
 AC_PLUGIN([fscache],     [$plugin_fscache],    [fscache statistics])
+AC_PLUGIN([geom_stat],   [$plugin_geom_stat],  [FreeBSD GEOM statistics])
 AC_PLUGIN([gmond],       [$with_libganglia],   [Ganglia plugin])
 AC_PLUGIN([hddtemp],     [yes],                [Query hddtempd])
 AC_PLUGIN([interface],   [$plugin_interface],  [Interface traffic statistics])
@@ -5660,6 +5666,7 @@
 AC_PLUGIN([write_tsdb],  [yes],                [TSDB output plugin])
 AC_PLUGIN([xmms],        [$with_libxmms],      [XMMS statistics])
 AC_PLUGIN([zfs_arc],     [$plugin_zfs_arc],    [ZFS ARC statistics])
+AC_PLUGIN([zfs_arc_v2],  [$plugin_zfs_arc_v2], [ZFS ARC statistics, improved v2])
 AC_PLUGIN([zookeeper],   [yes],  	       [Zookeeper statistics])
 
 dnl Default configuration file
@@ -5936,6 +5943,7 @@
     fhcount . . . . . . . $enable_fhcount
     filecount . . . . . . $enable_filecount
     fscache . . . . . . . $enable_fscache
+    geom_stat . . . . . . $enable_geom_stat
     gmond . . . . . . . . $enable_gmond
     hddtemp . . . . . . . $enable_hddtemp
     interface . . . . . . $enable_interface
@@ -6037,6 +6045,7 @@
     write_tsdb  . . . . . $enable_write_tsdb
     xmms  . . . . . . . . $enable_xmms
     zfs_arc . . . . . . . $enable_zfs_arc
+    zfs_arc_v2  . . . . . $enable_zfs_arc_v2
     zookeeper . . . . . . $enable_zookeeper
 
 EOF
--- src/Makefile.am.orig	2015-10-14 06:04:38.149530000 -0700
+++ src/Makefile.am	2015-10-14 06:05:34.128529000 -0700
@@ -87,6 +87,13 @@
 BUILT_SOURCES =
 CLEANFILES =
 
+if BUILD_PLUGIN_GEOM_STAT
+pkglib_LTLIBRARIES += geom_stat.la
+geom_stat_la_SOURCES = geom_stat.c
+geom_stat_la_LDFLAGS = -module -avoid-version -ldevstat -lkvm -lgeom -lbsdxml -lsbuf
+endif
+
+
 if BUILD_PLUGIN_AGGREGATION
 pkglib_LTLIBRARIES += aggregation.la
 aggregation_la_SOURCES = aggregation.c \
@@ -1289,6 +1298,20 @@
 zookeeper_la_LDFLAGS = $(PLUGIN_LDFLAGS)
 endif
 
+if BUILD_PLUGIN_ZFS_ARC_V2
+pkglib_LTLIBRARIES += zfs_arc_v2.la
+zfs_arc_v2_la_SOURCES = zfs_arc_v2.c
+zfs_arc_v2_la_CFLAGS = $(AM_CFLAGS)
+zfs_arc_v2_la_LDFLAGS = -module -avoid-version
+if BUILD_FREEBSD
+zfs_arc_v2_la_LIBADD = -lm
+else
+zfs_arc_v2_la_LIBADD = -lkstat
+endif
+endif
+
+
+
 BUILT_SOURCES += $(dist_man_MANS)
 
 dist_man_MANS = collectd.1 \
--- src/collectd.conf.in.orig	2015-10-14 06:04:38.157654000 -0700
+++ src/collectd.conf.in	2015-10-14 06:08:38.334173000 -0700
@@ -120,6 +120,7 @@
 #@BUILD_PLUGIN_FHCOUNT_TRUE@LoadPlugin fhcount
 #@BUILD_PLUGIN_FILECOUNT_TRUE@LoadPlugin filecount
 #@BUILD_PLUGIN_FSCACHE_TRUE@LoadPlugin fscache
+#@BUILD_PLUGIN_GEOM_STAT_TRUE@LoadPlugin geom_stat
 #@BUILD_PLUGIN_GMOND_TRUE@LoadPlugin gmond
 #@BUILD_PLUGIN_HDDTEMP_TRUE@LoadPlugin hddtemp
 @BUILD_PLUGIN_INTERFACE_TRUE@@BUILD_PLUGIN_INTERFACE_TRUE@LoadPlugin interface
@@ -206,6 +207,7 @@
 #@BUILD_PLUGIN_WRITE_TSDB_TRUE@LoadPlugin write_tsdb
 #@BUILD_PLUGIN_XMMS_TRUE@LoadPlugin xmms
 #@BUILD_PLUGIN_ZFS_ARC_TRUE@LoadPlugin zfs_arc
+#@BUILD_PLUGIN_ZFS_ARC_V2_TRUE@LoadPlugin zfs_arc_v2
 #@BUILD_PLUGIN_ZOOKEEPER_TRUE@LoadPlugin zookeeper
 
 ##############################################################################
--- src/geom_stat.c.orig	2015-10-14 06:05:34.131539000 -0700
+++ src/geom_stat.c	2015-10-14 06:05:34.135912000 -0700
@@ -0,0 +1,334 @@
+/**
+ * collectd - src/geom.c 
+ * 
+ * Copyright (c) 2003 Poul-Henning Kamp
+ * Copyright (c) 2015 David P. Discher <dpd@ixsystems.com> 
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. The names of the authors may not be used to endorse or promote
+ *    products derived from this software without specific prior written
+ *    permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ *
+ * $FreeBSD: stable/10/usr.sbin/gstat/gstat.c 268791 2014-07-17 06:36:22Z delphij $
+ */
+
+
+#include "collectd.h"
+#include "common.h"
+#include "plugin.h"
+
+
+#include <sys/devicestat.h>
+#include <sys/mman.h>
+#include <sys/resource.h>
+#include <sys/time.h>
+
+#include <devstat.h>
+#include <err.h>
+#include <errno.h>
+#include <fcntl.h>
+#include <libgeom.h>
+#include <paths.h>
+#include <regex.h>
+#include <stdint.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <sysexits.h>
+#include <unistd.h>
+
+
+/*
+ * Global variables
+ */
+
+#include <sys/types.h>
+#include <sys/sysctl.h>
+
+static regex_t f_re;
+static char f_s[100];
+static int fliterSet = 0;
+static int initDone = 0;
+
+static	struct devstat *gsp, *gsq;
+static	void *sp, *sq;
+static	double dt;
+static	struct timespec tp, tq;
+static	struct gmesh gmp;
+
+
+
+static const char *config_keys[] =
+{
+	"Filter"
+};
+static int config_keys_num = STATIC_ARRAY_SIZE (config_keys);
+
+static int geom_init (void) /* {{{ */
+{
+	int error, i;
+	DEBUG("geom_stat: geom_init");
+	if ( !initDone ){
+		DEBUG("geom_stat: geom_init - running init.");
+		fliterSet = 0;
+		i = geom_gettree(&gmp);
+		if (i != 0)
+			err(1, "geom_gettree = %d", i);
+		error = geom_stats_open();
+		if (error)
+			err(1, "geom_stats_open()");
+		sq = NULL;
+		sq = geom_stats_snapshot_get();
+		if (sq == NULL)
+			err(1, "geom_stats_snapshot()");
+		geom_stats_snapshot_timestamp(sq, &tq);
+	}
+	
+	if ( fliterSet == 0 ) {
+		if ( regcomp(&f_re, "^[a]?da[0123456789]+$", REG_EXTENDED) == 0 ) {
+			fliterSet = 1;
+		}
+	}
+	initDone = 1;
+	DEBUG("geom_stat: geom_init - complete.");
+	return (0);
+} /* }}} int geom_init */
+
+
+static int geom_stat_config (const char *key, const char *value)
+{	
+	geom_init();
+	
+	if (0 == strcasecmp (key, "Filter")) {
+
+		if (strlen(value) > sizeof(f_s) - 1) {
+			DEBUG("geom_stat: Filter string too long");
+			return -1;
+		} 
+		if (regcomp(&f_re, value, REG_EXTENDED) != 0) {
+			DEBUG( "geom_stat: Invalid filter - see re_format(7)");
+			return -1;
+		} else {
+			fliterSet = 1;
+			DEBUG( "geom_stat: Valid filter accepted re_format(7) : %s", value);
+		}
+	
+	} else {
+		return -1;
+	}
+	return 0;
+} 
+
+static void geom_submit_trip (const char* type, const char* type_instance, gauge_t read, gauge_t write, gauge_t delete)
+{
+	value_t values[3];
+	value_list_t vl = VALUE_LIST_INIT;
+
+	values[0].gauge = read;
+	values[1].gauge = write;
+	values[2].gauge = delete;
+
+	vl.values = values;
+	vl.values_len = STATIC_ARRAY_SIZE (values);
+	sstrncpy (vl.host, hostname_g, sizeof (vl.host));
+	sstrncpy (vl.plugin, "geom_stat", sizeof (vl.plugin));
+	sstrncpy (vl.type, type, sizeof (vl.type));
+	sstrncpy (vl.type_instance, type_instance, sizeof (vl.type_instance));
+
+	plugin_dispatch_values (&vl);
+}
+
+
+static void geom_submit (const char* type, const char* type_instance, value_t* values, int values_len)
+{
+	value_list_t vl = VALUE_LIST_INIT;
+
+	vl.values = values;
+	vl.values_len = values_len;
+
+	sstrncpy (vl.host, hostname_g, sizeof (vl.host));
+	sstrncpy (vl.plugin, "geom_stat", sizeof (vl.plugin));
+	sstrncpy (vl.type, type, sizeof (vl.type));
+	sstrncpy (vl.type_instance, type_instance, sizeof (vl.type_instance));
+
+	plugin_dispatch_values (&vl);
+}
+
+static void geom_submit_gauge (const char* type, const char* type_instance, gauge_t value)
+{
+	value_t vv;
+
+	vv.gauge = value;
+	geom_submit (type, type_instance, &vv, 1);
+}
+
+
+/* 
+	This read code is largely lifted from FreeBSD's usr.sbin/gstat/gstat.c 
+*/
+static int geom_read (void)
+{
+
+	struct gprovider *pp;
+	struct gconsumer *cp;
+	struct gident *gid;
+	long double ld[11];
+	uint64_t u64;
+	int i, retval;
+
+	sp = geom_stats_snapshot_get();
+	if (sp == NULL)
+		err(1, "geom_stats_snapshot()");
+	geom_stats_snapshot_timestamp(sp, &tp);
+	dt = tp.tv_sec - tq.tv_sec;
+	dt += (tp.tv_nsec - tq.tv_nsec) * 1e-9;
+	tq = tp;
+
+	geom_stats_snapshot_reset(sp);
+	geom_stats_snapshot_reset(sq);
+
+	for (;;) {
+		gsp = geom_stats_snapshot_next(sp);
+		gsq = geom_stats_snapshot_next(sq);
+		if (gsp == NULL || gsq == NULL)
+			break;
+		if (gsp->id == NULL)
+			continue;
+		gid = geom_lookupid(&gmp, gsp->id);
+		if (gid == NULL) {
+			geom_deletetree(&gmp);
+			i = geom_gettree(&gmp);
+			if (i != 0)
+				err(1, "geom_gettree = %d", i);
+			gid = geom_lookupid(&gmp, gsp->id);
+		}
+		if (gid == NULL)
+			continue;
+		if (gid->lg_what == ISCONSUMER )
+			continue;
+		if (  (gid->lg_what == ISPROVIDER || gid->lg_what == ISCONSUMER) && fliterSet ) {
+			pp = gid->lg_ptr;
+			retval = regexec(&f_re, pp->lg_name, 0, NULL, 0);
+			DEBUG("geom_stat: REGEXEC (%d), string: {%s}", retval, pp->lg_name );
+			if ( retval != 0 ) { continue; }
+		} else {		
+			pp = gid->lg_ptr;
+			DEBUG("geom_stat: REGEXEC : Failed to run filter. name: {%s}, what: {%d}, isprovider: {%d}, isconsumer: {%d}, cmp: {%d}", 
+				pp->lg_name,
+				gid->lg_what,
+				ISPROVIDER,
+				ISCONSUMER,
+				fliterSet
+			);			
+		}
+		if (gsp->sequence0 != gsp->sequence1) {
+			continue;
+		}
+		devstat_compute_statistics(gsp, gsq, dt, 
+			DSM_QUEUE_LENGTH, &u64,
+			DSM_TRANSFERS_PER_SECOND, &ld[0],
+
+			DSM_TRANSFERS_PER_SECOND_READ, &ld[1],
+			DSM_MB_PER_SECOND_READ, &ld[2],
+			DSM_MS_PER_TRANSACTION_READ, &ld[3],
+
+			DSM_TRANSFERS_PER_SECOND_WRITE, &ld[4],
+			DSM_MB_PER_SECOND_WRITE, &ld[5],
+			DSM_MS_PER_TRANSACTION_WRITE, &ld[6],
+
+			DSM_BUSY_PCT, &ld[7],
+			DSM_TRANSFERS_PER_SECOND_FREE, &ld[8],
+			DSM_MB_PER_SECOND_FREE, &ld[9],
+			DSM_MS_PER_TRANSACTION_FREE, &ld[10],
+			DSM_NONE);
+
+
+		char geom_name[256];
+				
+		if (gid == NULL) {
+	        snprintf(geom_name, sizeof(geom_name), "%s", "unknown" );			
+		} else if (gid->lg_what == ISPROVIDER) {
+			pp = gid->lg_ptr;
+	        snprintf(geom_name, sizeof(geom_name), "%s", pp->lg_name );
+		} else if (gid->lg_what == ISCONSUMER) {
+			cp = gid->lg_ptr;
+
+	        snprintf(geom_name, sizeof(geom_name), "%s.%s.%s",
+				cp->lg_geom->lg_class->lg_name,
+				cp->lg_geom->lg_name,
+				cp->lg_provider->lg_name);
+		} else {
+	        snprintf(geom_name, sizeof(geom_name), "%s", "undefined" );
+		}
+
+
+		// Queue Length L(q)		
+		geom_submit_gauge( "geom_queue", geom_name, u64);
+
+		// ops/sec
+		geom_submit_gauge( "geom_ops", geom_name, ld[0]);
+		
+		
+		// reads/sec
+		// writes/sec
+		// deletes/sec
+		geom_submit_trip ( "geom_ops_rwd", geom_name , (double)ld[1], (double)ld[4], (double)ld[8] );
+		
+		// kB/s - kBps read
+		// kB/s - KBps write 
+		// kBps delete
+		// Graphic units end up being bytes/second - value is read in MB/sec. 
+		geom_submit_trip ( "geom_bw", geom_name , 
+			(double)ld[2] * 1024 * 1024, 
+			(double)ld[5] * 1024 * 1024, 
+			(double)ld[9] * 1024 * 1024 );
+
+
+		// ms/r			
+		// bio-deletes 		
+		// ms/delete
+		// Units - read and stores as milliseconds
+		geom_submit_trip ( "geom_latency", geom_name , (double)ld[1], (double)ld[4], (double)ld[8] );
+
+		// Busy Percent 
+		geom_submit_gauge( "geom_busy_percent", geom_name, ld[7]);
+
+		*gsq = *gsp;
+	}
+	geom_stats_snapshot_free(sp);
+
+	return (0);
+} /* int geom_read */
+
+
+void module_register (void)
+{
+
+	plugin_register_config ("geom_stat", geom_stat_config,
+			config_keys, config_keys_num);
+
+	plugin_register_init ("geom_stat", geom_init);
+	plugin_register_read ("geom_stat", geom_read);
+} /* void module_register */
+
+/* vmi: set sw=8 noexpandtab fdm=marker : */
--- src/types.db.orig	2015-05-20 05:05:42.672060002 -0700
+++ src/types.db	2015-10-14 06:05:34.137516000 -0700
@@ -239,3 +239,44 @@
 arc_size		current:GAUGE:0:U, target:GAUGE:0:U, minlimit:GAUGE:0:U, maxlimit:GAUGE:0:U
 mysql_qcache		hits:COUNTER:0:U, inserts:COUNTER:0:U, not_cached:COUNTER:0:U, lowmem_prunes:COUNTER:0:U, queries_in_cache:GAUGE:0:U
 mysql_threads		running:GAUGE:0:U, connected:GAUGE:0:U, cached:GAUGE:0:U, created:COUNTER:0:U
+
+
+# new zfs
+
+gauge_arcstats_raw       value:GAUGE:0:U 
+gauge_arcstats_raw_arcmeta       value:GAUGE:0:U 
+gauge_arcstats_raw_counts       value:GAUGE:0:U 
+gauge_arcstats_raw_cp       value:GAUGE:0:U 
+gauge_arcstats_raw_demand       value:GAUGE:0:U 
+gauge_arcstats_raw_duplicate       value:GAUGE:0:U 
+gauge_arcstats_raw_evict       value:GAUGE:0:U 
+gauge_arcstats_raw_hash       value:GAUGE:0:U 
+gauge_arcstats_raw_hits_misses       value:GAUGE:0:U 
+gauge_arcstats_raw_l2       value:GAUGE:0:U 
+gauge_arcstats_raw_l2_compress       value:GAUGE:0:U 
+gauge_arcstats_raw_l2_free       value:GAUGE:0:U 
+gauge_arcstats_raw_l2abort       value:GAUGE:0:U 
+gauge_arcstats_raw_l2bytes       value:GAUGE:0:U 
+gauge_arcstats_raw_l2evict       value:GAUGE:0:U 
+gauge_arcstats_raw_l2write       value:GAUGE:0:U 
+gauge_arcstats_raw_l2writes       value:GAUGE:0:U 
+gauge_arcstats_raw_memcount       value:GAUGE:0:U 
+gauge_arcstats_raw_mru       value:GAUGE:0:U 
+gauge_arcstats_raw_prefetch       value:GAUGE:0:U 
+gauge_arcstats_raw_size       value:GAUGE:0:U 
+arcstat_ratio_arc				value:GAUGE:0:100.1
+arcstat_ratio_mu				value:GAUGE:0:100.1
+arcstat_ratio_l2				value:GAUGE:0:100.1
+arcstat_ratio_data				value:GAUGE:0:100.1
+arcstat_ratio_metadata				value:GAUGE:0:100.1
+
+
+# geom_stat
+
+geom_queue			length:GAUGE:0:1048576
+geom_ops			length:GAUGE:0:4294967295
+geom_ops_rwd		read:GAUGE:0:4294967295, write:GAUGE:0:4294967295, delete:GAUGE:0:4294967295
+geom_latency		read:GAUGE:0:1048576, write:GAUGE:0:1048576, delete:GAUGE:0:1048576
+geom_bw				read:GAUGE:0:4294967295, write:GAUGE:0:4294967295, delete:GAUGE:0:4294967295
+geom_busy_percent	value:GAUGE:0:150.1
+
--- src/zfs_arc_v2.c.orig	2015-10-14 06:05:34.137927000 -0700
+++ src/zfs_arc_v2.c	2015-10-14 06:05:34.142654000 -0700
@@ -0,0 +1,447 @@
+/**
+ * collectd - src/zfs_arc_v2.c - forked from the orignal zfs_arc.c 
+ *
+ * Copyright (C) 2009  Anthony Dewhurst
+ * Copyright (C) 2012  Aurelien Rougemont
+ * Copyright (C) 2013  Xin Li
+ * Copyright (C) 2015  David P. Discher
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License as published by the
+ * Free Software Foundation; only version 2 of the License is applicable.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA
+ *
+ * Authors:
+ *   Anthony Dewhurst <dewhurst at gmail>
+ *   Aurelien Rougemont <beorn at gandi.net>
+ *   Xin Li <delphij at FreeBSD.org>
+ *   David P. Discher <dpd at ixsystems.com>
+ 
+**/
+
+
+#include "collectd.h"
+#include "common.h"
+#include "plugin.h"
+
+/*
+ * Global variables
+ */
+
+#if !defined(__FreeBSD__)
+extern kstat_ctl_t *kc;
+
+static long long get_zfs_value(kstat_t *ksp, char *name)
+{
+
+	return (get_kstat_value(ksp, name));
+}
+#else
+#include <sys/types.h>
+#include <sys/sysctl.h>
+
+const char zfs_arcstat[] = "kstat.zfs.misc.arcstats.";
+
+#if !defined(kstat_t)
+typedef void kstat_t;
+#endif
+
+typedef struct {
+
+	uint64_t hits;
+	uint64_t misses;
+	uint64_t total;
+	double ratio;	
+
+} zfs_cacheratio;
+
+
+static zfs_cacheratio ratio_arc = { 0, 0, 0, 0 };
+
+static zfs_cacheratio ratio_l2 = { 0, 0, 0, 0 };
+
+static zfs_cacheratio ratio_mru = { 0, 0, 0, 0 };
+static zfs_cacheratio ratio_mfu = { 0, 0, 0, 0 };
+
+//static zfs_cacheratio ratio_mru_ghost = { 0, 0, 0, 0 };
+//static zfs_cacheratio ratio_mfu_ghost = { 0, 0, 0, 0 };
+
+
+static zfs_cacheratio ratio_demand_data = { 0, 0, 0, 0 };
+static zfs_cacheratio ratio_demand_metadata = { 0, 0, 0, 0 };
+
+static zfs_cacheratio ratio_prefetch_data = { 0, 0, 0, 0 };
+static zfs_cacheratio ratio_prefetch_metadata = { 0, 0, 0, 0 };
+
+
+typedef struct  {
+	char *key;
+	char *type;
+	char *type_instance;
+	int  raw;
+	uint64_t previous;
+	uint64_t current;
+	int64_t delta;
+
+} arcstat_item;
+
+static const int arcstat_length = 79;
+static arcstat_item arcstats[79] = {
+{ "hits", "gauge_arcstats_raw_hits_misses", "hits", 0, 0, 0, 0},
+{ "misses", "gauge_arcstats_raw_hits_misses", "misses", 0, 0, 0, 0},
+{ "demand_data_hits", "gauge_arcstats_raw_demand", "demand_data_hits", 0, 0, 0, 0},
+{ "demand_data_misses", "gauge_arcstats_raw_demand", "demand_data_misses", 0, 0, 0, 0},
+{ "demand_metadata_hits", "gauge_arcstats_raw_demand", "demand_metadata_hits", 0, 0, 0, 0},
+{ "demand_metadata_misses", "gauge_arcstats_raw_demand", "demand_metadata_misses", 0, 0, 0, 0},
+{ "prefetch_data_hits", "gauge_arcstats_raw_prefetch", "prefetch_data_hits", 0, 0, 0, 0},
+{ "prefetch_data_misses", "gauge_arcstats_raw_prefetch", "prefetch_data_misses", 0, 0, 0, 0},
+{ "prefetch_metadata_hits", "gauge_arcstats_raw_prefetch", "prefetch_metadata_hits", 0, 0, 0, 0},
+{ "prefetch_metadata_misses", "gauge_arcstats_raw_prefetch", "prefetch_metadata_misses", 0, 0, 0, 0},
+{ "mru_hits", "gauge_arcstats_raw_mru", "mru_hits", 0, 0, 0, 0},
+{ "mru_ghost_hits", "gauge_arcstats_raw_mru", "mru_ghost_hits", 0, 0, 0, 0},
+{ "mfu_hits", "gauge_arcstats_raw_mru", "mfu_hits", 0, 0, 0, 0},
+{ "mfu_ghost_hits", "gauge_arcstats_raw_mru", "mfu_ghost_hits", 0, 0, 0, 0},
+{ "allocated", "gauge_arcstats_raw_counts", "allocated", 0, 0, 0, 0},
+{ "deleted", "gauge_arcstats_raw_counts", "deleted", 0, 0, 0, 0},
+{ "stolen", "gauge_arcstats_raw_counts", "stolen", 0, 0, 0, 0},
+{ "recycle_miss", "gauge_arcstats_raw_counts", "recycle_miss", 0, 0, 0, 0},
+{ "mutex_miss", "gauge_arcstats_raw_counts", "mutex_miss", 0, 0, 0, 0},
+{ "evict_skip", "gauge_arcstats_raw_evict", "evict_skip", 0, 0, 0, 0},
+{ "evict_l2_cached", "gauge_arcstats_raw_evict", "evict_l2_cached", 0, 0, 0, 0},
+{ "evict_l2_eligible", "gauge_arcstats_raw_evict", "evict_l2_eligible", 0, 0, 0, 0},
+{ "evict_l2_ineligible", "gauge_arcstats_raw_evict", "evict_l2_ineligible", 0, 0, 0, 0},
+{ "hash_elements", "gauge_arcstats_raw_hash", "hash_elements", 0, 0, 0, 0},
+{ "hash_elements_max", "gauge_arcstats_raw_hash", "hash_elements_max", 1, 0, 0, 0},
+{ "hash_collisions", "gauge_arcstats_raw_hash", "hash_collisions", 0, 0, 0, 0},
+{ "hash_chains", "gauge_arcstats_raw_hash", "hash_chains", 0, 0, 0, 0},
+{ "hash_chain_max", "gauge_arcstats_raw_hash", "hash_chain_max", 1, 0, 0, 0},
+{ "p", "gauge_arcstats_raw_cp", "p", 1, 0, 0, 0},
+{ "c", "gauge_arcstats_raw_cp", "c", 1, 0, 0, 0},
+{ "c_min", "gauge_arcstats_raw_cp", "c_min", 1, 0, 0, 0},
+{ "c_max", "gauge_arcstats_raw_cp", "c_max", 1, 0, 0, 0},
+{ "size", "gauge_arcstats_raw_size", "size", 1, 0, 0, 0},
+{ "hdr_size", "gauge_arcstats_raw_size", "hdr_size", 1, 0, 0, 0},
+{ "data_size", "gauge_arcstats_raw_size", "data_size", 1, 0, 0, 0},
+{ "other_size", "gauge_arcstats_raw_size", "other_size", 1, 0, 0, 0},
+{ "l2_hits", "gauge_arcstats_raw_l2", "l2_hits", 0, 0, 0, 0},
+{ "l2_misses", "gauge_arcstats_raw_l2", "l2_misses", 0, 0, 0, 0},
+{ "l2_feeds", "gauge_arcstats_raw_l2", "l2_feeds", 0, 0, 0, 0},
+{ "l2_rw_clash", "gauge_arcstats_raw_l2", "l2_rw_clash", 0, 0, 0, 0},
+{ "l2_cksum_bad", "gauge_arcstats_raw_l2", "l2_cksum_bad", 0, 0, 0, 0},
+{ "l2_io_error", "gauge_arcstats_raw_l2", "l2_io_error", 0, 0, 0, 0},
+{ "l2_read_bytes", "gauge_arcstats_raw_l2bytes", "l2_read_bytes", 0, 0, 0, 0},
+{ "l2_write_bytes", "gauge_arcstats_raw_l2bytes", "l2_write_bytes", 0, 0, 0, 0},
+{ "l2_writes_sent", "gauge_arcstats_raw_l2writes", "l2_writes_sent", 0, 0, 0, 0},
+{ "l2_writes_done", "gauge_arcstats_raw_l2writes", "l2_writes_done", 0, 0, 0, 0},
+{ "l2_writes_error", "gauge_arcstats_raw_l2writes", "l2_writes_error", 0, 0, 0, 0},
+{ "l2_writes_hdr_miss", "gauge_arcstats_raw_l2writes", "l2_writes_hdr_miss", 0, 0, 0, 0},
+{ "l2_evict_lock_retry", "gauge_arcstats_raw_l2evict", "l2_evict_lock_retry", 0, 0, 0, 0},
+{ "l2_evict_reading", "gauge_arcstats_raw_l2evict", "l2_evict_reading", 0, 0, 0, 0},
+{ "l2_free_on_write", "gauge_arcstats_raw_l2_free", "l2_free_on_write", 0, 0, 0, 0},
+{ "l2_cdata_free_on_write", "gauge_arcstats_raw_l2_free", "l2_cdata_free_on_write", 0, 0, 0, 0},
+{ "l2_abort_lowmem", "gauge_arcstats_raw_l2abort", "l2_abort_lowmem", 0, 0, 0, 0},
+{ "l2_size", "gauge_arcstats_raw", "l2_size", 1, 0, 0, 0},
+{ "l2_asize", "gauge_arcstats_raw", "l2_asize", 1, 0, 0, 0},
+{ "l2_hdr_size", "gauge_arcstats_raw", "l2_hdr_size", 1, 0, 0, 0},
+{ "l2_compress_successes", "gauge_arcstats_raw_l2_compress", "l2_compress_successes", 0, 0, 0, 0},
+{ "l2_compress_zeros", "gauge_arcstats_raw_l2_compress", "l2_compress_zeros", 0, 0, 0, 0},
+{ "l2_compress_failures", "gauge_arcstats_raw_l2_compress", "l2_compress_failures", 0, 0, 0, 0},
+{ "l2_write_trylock_fail", "gauge_arcstats_raw_l2write", "l2_write_trylock_fail", 0, 0, 0, 0},
+{ "l2_write_passed_headroom", "gauge_arcstats_raw_l2write", "l2_write_passed_headroom", 0, 0, 0, 0},
+{ "l2_write_spa_mismatch", "gauge_arcstats_raw_l2write", "l2_write_spa_mismatch", 0, 0, 0, 0},
+{ "l2_write_in_l2", "gauge_arcstats_raw_l2write", "l2_write_in_l2", 0, 0, 0, 0},
+{ "l2_write_io_in_progress", "gauge_arcstats_raw_l2write", "l2_write_io_in_progress", 0, 0, 0, 0},
+{ "l2_write_not_cacheable", "gauge_arcstats_raw_l2write", "l2_write_not_cacheable", 0, 0, 0, 0},
+{ "l2_write_full", "gauge_arcstats_raw_l2write", "l2_write_full", 0, 0, 0, 0},
+{ "l2_write_buffer_iter", "gauge_arcstats_raw_l2write", "l2_write_buffer_iter", 0, 0, 0, 0},
+{ "l2_write_pios", "gauge_arcstats_raw_l2write", "l2_write_pios", 0, 0, 0, 0},
+{ "l2_write_buffer_bytes_scanned", "gauge_arcstats_raw_l2write", "l2_write_buffer_bytes_scanned", 0, 0, 0, 0},
+{ "l2_write_buffer_list_iter", "gauge_arcstats_raw_l2write", "l2_write_buffer_list_iter", 0, 0, 0, 0},
+{ "l2_write_buffer_list_null_iter", "gauge_arcstats_raw_l2write", "l2_write_buffer_list_null_iter", 0, 0, 0, 0},
+{ "memory_throttle_count", "gauge_arcstats_raw_memcount", "memory_throttle_count", 0, 0, 0, 0},
+{ "duplicate_buffers", "gauge_arcstats_raw_duplicate", "duplicate_buffers", 0, 0, 0, 0},
+{ "duplicate_buffers_size", "gauge_arcstats_raw_duplicate", "duplicate_buffers_size", 1, 0, 0, 0},
+{ "duplicate_reads", "gauge_arcstats_raw_duplicate", "duplicate_reads", 0, 0, 0, 0},
+{ "arc_meta_used", "gauge_arcstats_raw_arcmeta", "arc_meta_used", 1, 0, 0, 0},
+{ "arc_meta_limit", "gauge_arcstats_raw_arcmeta", "arc_meta_limit", 1, 0, 0, 0},
+{ "arc_meta_max", "gauge_arcstats_raw_arcmeta", "arc_meta_max", 1, 0, 0, 0},
+{ "arc_meta_min", "gauge_arcstats_raw_arcmeta", "arc_meta_min", 1, 0, 0, 0},
+};
+
+static void za_v2_ratio_calc (zfs_cacheratio *cr, uint64_t denom ){
+	cr->total = cr->hits + cr->misses;
+
+	/*
+		Division by Zero dilemma in Ratios
+		For the purpose of computer stats, and how in the scope of FreeBSD zfs some
+		of these metrics are collected, Divison by zero will be defined as, 100% if the
+		denominator is greater than zero.
+		
+		Otherwise the ratio is zero. 
+			
+	*/
+
+	if ( cr->total == 0 ) {
+		if ( denom > 0 ) {
+			cr->ratio = 100.0;
+		} else {
+			cr->ratio = 0.0;
+		}
+		DEBUG("zfs_arc_v2: za_v2_ratio_calc by-zero %f ", cr->ratio );
+	} else {
+		cr->ratio =  ( (double)denom / (double)cr->total )  * 100;
+		DEBUG("zfs_arc_v2: za_v2_ratio_calc division  %f ", (double)denom/(double)cr->total );
+	}
+	
+	DEBUG("zfs_arc_v2: za_v2_ratio_calc %ju %ju %f", cr->total, denom, cr->ratio );
+	return;
+
+}
+
+static long long get_zfs_value(kstat_t *dummy __attribute__((unused)),
+		char const *name)
+{
+	char buffer[256];
+	long long value;
+	size_t valuelen = sizeof(value);
+	int rv;
+
+	ssnprintf (buffer, sizeof (buffer), "%s%s", zfs_arcstat, name);
+	rv = sysctlbyname (buffer, (void *) &value, &valuelen,
+			/* new value = */ NULL, /* new length = */ (size_t) 0);
+	if (rv == 0)
+		return (value);
+
+	return (-1);
+}
+
+static void za_v2_calc_arcstat ( kstat_t *ksp, arcstat_item *i  ) {
+
+		DEBUG("zfs_arc_v2: za_v2_calc_arcstat - starting %s", i->key );
+		DEBUG("zfs_arc_v2: za_v2_calc_arcstat - starting %ju %ju %jd", (uint64_t)i->previous, (uint64_t)i->current, (int64_t)i->delta );
+		i->previous = i->current;
+		i->current = get_zfs_value(ksp, i->key);
+		i->delta = i->current - i->previous;
+		return;
+		
+}
+
+#endif
+
+static void za_v2_submit (const char* type, const char* type_instance, value_t* values, int values_len)
+{
+	value_list_t vl = VALUE_LIST_INIT;
+
+	vl.values = values;
+	vl.values_len = values_len;
+
+	sstrncpy (vl.host, hostname_g, sizeof (vl.host));
+	sstrncpy (vl.plugin, "zfs_arc_v2", sizeof (vl.plugin));
+	sstrncpy (vl.type, type, sizeof (vl.type));
+	sstrncpy (vl.type_instance, type_instance, sizeof (vl.type_instance));
+
+	plugin_dispatch_values (&vl);
+}
+
+static void za_v2_submit_gauge (const char* type, const char* type_instance, gauge_t value)
+{
+	value_t vv;
+
+	vv.gauge = value;
+	za_v2_submit (type, type_instance, &vv, 1);
+}
+
+
+static int za_v2_read (void)
+{
+
+	kstat_t	 *ksp	= NULL;
+	int i;
+
+	DEBUG ("zfs: za_v2_read");
+
+#if !defined(__FreeBSD__)
+	get_kstat (&ksp, "zfs", 0, "arcstats");
+	if (ksp == NULL)
+	{
+		ERROR ("zfs_arc_v2: plugin: Cannot find zfs:0:arcstats kstat.");
+		return (-1);
+	}
+#endif
+
+
+/**  gauge ** ****************************************************************************************** */
+
+	// za_v2_read_gauge (ksp, "hits",    "gauge_arcstats_raw_hits_misses", "hits");
+	
+	for (i=0; i<arcstat_length; i++) {
+
+		za_v2_calc_arcstat (ksp, &arcstats[i]);
+		if  ( 1 == arcstats[i].raw ) {
+			za_v2_submit_gauge (arcstats[i].type, arcstats[i].type_instance, (gauge_t) arcstats[i].current);
+		} else {
+			za_v2_submit_gauge (arcstats[i].type, arcstats[i].type_instance, (gauge_t) arcstats[i].delta);
+		}
+		
+		if ( strcmp ( "hits", arcstats[i].key ) == 0 ) {
+			ratio_arc.hits = arcstats[i].delta;
+			DEBUG("zfs_arc_v2: ratio - %s %ju ", arcstats[i].key, ratio_arc.hits );
+		} else if ( strcmp ( "misses", arcstats[i].key ) == 0 ) {
+			ratio_arc.misses = arcstats[i].delta;			
+			DEBUG("zfs_arc_v2: ratio - %s %ju ", arcstats[i].key, ratio_arc.hits );
+
+		} else if ( strcmp ( "demand_data_hits", arcstats[i].key ) == 0 ) {
+			ratio_demand_data.hits = arcstats[i].delta;
+			DEBUG("zfs_arc_v2: ratio - %s %ju ", arcstats[i].key, ratio_arc.hits );
+		} else if ( strcmp ( "demand_data_misses", arcstats[i].key ) == 0 ) {		
+			ratio_demand_data.misses = arcstats[i].delta;
+			DEBUG("zfs_arc_v2: ratio - %s %ju ", arcstats[i].key, ratio_arc.hits );
+
+		} else if ( strcmp ( "demand_metadata_hits", arcstats[i].key ) == 0 ) {		
+			ratio_demand_metadata.hits = arcstats[i].delta;
+			DEBUG("zfs_arc_v2: ratio - %s %ju ", arcstats[i].key, ratio_arc.hits );
+		} else if ( strcmp ( "demand_metadata_misses", arcstats[i].key ) == 0 ) {		
+			ratio_demand_metadata.misses = arcstats[i].delta;
+			DEBUG("zfs_arc_v2: ratio - %s %ju ", arcstats[i].key, ratio_arc.hits );
+			
+		} else if ( strcmp ( "prefetch_data_hits", arcstats[i].key ) == 0 ) {
+			ratio_prefetch_data.hits = arcstats[i].delta;
+			DEBUG("zfs_arc_v2: ratio - %s %ju ", arcstats[i].key, ratio_arc.hits );
+		} else if ( strcmp ( "prefetch_data_misses", arcstats[i].key ) == 0 ) {		
+			ratio_prefetch_data.misses = arcstats[i].delta;
+			DEBUG("zfs_arc_v2: ratio - %s %ju ", arcstats[i].key, ratio_arc.hits );
+		
+		} else if ( strcmp ( "prefetch_metadata_hits", arcstats[i].key ) == 0 ) {		
+			ratio_prefetch_metadata.hits = arcstats[i].delta;
+			DEBUG("zfs_arc_v2: ratio - %s %ju ", arcstats[i].key, ratio_arc.hits );
+		} else if ( strcmp ( "prefetch_metadata_misses", arcstats[i].key ) == 0 ) {		
+			ratio_prefetch_metadata.misses = arcstats[i].delta;
+			DEBUG("zfs_arc_v2: ratio - %s %ju ", arcstats[i].key, ratio_arc.hits );
+
+		} else if ( strcmp ( "mru_hits", arcstats[i].key ) == 0 ) {		
+			ratio_mru.hits = arcstats[i].delta;
+			DEBUG("zfs_arc_v2: ratio - %s %ju ", arcstats[i].key, ratio_arc.hits );
+		} else if ( strcmp ( "mru_ghost_hits", arcstats[i].key ) == 0 ) {
+			ratio_mru.misses = arcstats[i].delta;
+			DEBUG("zfs_arc_v2: ratio - %s %ju ", arcstats[i].key, ratio_arc.hits );
+		
+		} else if ( strcmp ( "mfu_hits", arcstats[i].key ) == 0 ) {		
+			ratio_mfu.hits = arcstats[i].delta;
+			DEBUG("zfs_arc_v2: ratio - %s %ju ", arcstats[i].key, ratio_arc.hits );
+		} else if ( strcmp ( "mfu_ghost_hits", arcstats[i].key ) == 0 ) {
+			ratio_mfu.misses = arcstats[i].delta;
+			DEBUG("zfs_arc_v2: ratio - %s %ju ", arcstats[i].key, ratio_arc.hits );
+		
+		} else if ( strcmp ( "l2_hits", arcstats[i].key ) == 0 ) {		
+			ratio_l2.hits = arcstats[i].delta;
+			DEBUG("zfs_arc_v2: ratio - %s %ju ", arcstats[i].key, ratio_arc.hits );
+		} else if ( strcmp ( "l2_misses", arcstats[i].key ) == 0 ) {		
+			ratio_l2.misses = arcstats[i].delta;
+			DEBUG("zfs_arc_v2: ratio - %s %ju ", arcstats[i].key, ratio_arc.hits );
+		}
+		
+	}
+
+	
+	za_v2_ratio_calc ( &ratio_arc, ratio_arc.hits );
+	za_v2_submit_gauge ("arcstat_ratio_arc", "hits", (gauge_t) ratio_arc.ratio );
+
+	za_v2_ratio_calc ( &ratio_arc, ratio_arc.misses );
+	za_v2_submit_gauge ("arcstat_ratio_arc", "misses", (gauge_t) ratio_arc.ratio );
+
+	za_v2_ratio_calc ( &ratio_l2, ratio_l2.hits );
+	za_v2_submit_gauge ("arcstat_ratio_arc", "l2_hits", (gauge_t) ratio_l2.ratio );
+
+	za_v2_ratio_calc ( &ratio_l2, ratio_l2.misses );
+	za_v2_submit_gauge ("arcstat_ratio_arc", "l2_misses", (gauge_t) ratio_l2.ratio );
+
+	za_v2_ratio_calc ( &ratio_mru, ratio_mru.hits );
+	za_v2_submit_gauge ("arcstat_ratio_mu", "mru_hits", (gauge_t) ratio_mru.ratio );
+
+	za_v2_ratio_calc ( &ratio_mru, ratio_mru.misses );
+	za_v2_submit_gauge ("arcstat_ratio_mu", "mru_ghost_hits", (gauge_t) ratio_mru.ratio );
+
+
+	za_v2_ratio_calc ( &ratio_mfu, ratio_mfu.hits );
+	za_v2_submit_gauge ("arcstat_ratio_mu", "mfu_hits", (gauge_t) ratio_mfu.ratio );
+
+	za_v2_ratio_calc ( &ratio_mfu, ratio_mfu.misses );
+	za_v2_submit_gauge ("arcstat_ratio_mu", "mfu_ghost_hits", (gauge_t) ratio_mfu.ratio );
+
+
+	za_v2_ratio_calc ( &ratio_demand_data, ratio_demand_data.hits );
+	za_v2_submit_gauge ("arcstat_ratio_data", "demand_data_hits", (gauge_t) ratio_demand_data.ratio );
+
+	za_v2_ratio_calc ( &ratio_demand_data, ratio_demand_data.misses );
+	za_v2_submit_gauge ("arcstat_ratio_data", "demand_data_misses", (gauge_t) ratio_demand_data.ratio );
+
+	za_v2_ratio_calc ( &ratio_prefetch_data, ratio_prefetch_data.hits );
+	za_v2_submit_gauge ("arcstat_ratio_data", "prefetch_data_hits", (gauge_t) ratio_prefetch_data.ratio );
+
+	za_v2_ratio_calc ( &ratio_prefetch_data, ratio_prefetch_data.misses );
+	za_v2_submit_gauge ("arcstat_ratio_data", "prefetch_data_misses", (gauge_t) ratio_prefetch_data.ratio );
+
+
+	za_v2_ratio_calc ( &ratio_demand_metadata, ratio_demand_metadata.hits );
+	za_v2_submit_gauge ("arcstat_ratio_metadata", "demand_metadata_hits", (gauge_t) ratio_demand_metadata.ratio );
+
+	za_v2_ratio_calc ( &ratio_demand_metadata, ratio_demand_metadata.misses );
+	za_v2_submit_gauge ("arcstat_ratio_metadata", "demand_metadata_misses", (gauge_t) ratio_demand_metadata.ratio );
+
+
+	za_v2_ratio_calc ( &ratio_prefetch_metadata, ratio_prefetch_metadata.hits );
+	za_v2_submit_gauge ("arcstat_ratio_metadata", "prefetch_metadata_hits", (gauge_t) ratio_prefetch_metadata.ratio );
+
+	za_v2_ratio_calc ( &ratio_prefetch_metadata, ratio_prefetch_metadata.misses  );
+	za_v2_submit_gauge ("arcstat_ratio_metadata", "prefetch_metadata_misses", (gauge_t) ratio_prefetch_metadata.ratio );
+
+
+
+	return (0);
+} /* int za_v2_read */
+
+static int za_v2_init (void) /* {{{ */
+{
+	int i;
+	kstat_t	 *ksp	= NULL;
+#if !defined(__FreeBSD__)
+	get_kstat (&ksp, "zfs", 0, "arcstats");
+	if (ksp == NULL)
+	{
+		ERROR ("zfs_arc_v2 plugin: Cannot find zfs:0:arcstats kstat.");
+		return (-1);
+	}
+#endif
+	
+	DEBUG ("zfs_arc_v2: za_v2_init");
+	for (i=0; i<arcstat_length; i++) {
+		za_v2_calc_arcstat (ksp, &arcstats[i]);
+	}
+	
+#if !defined(__FreeBSD__)
+	/* kstats chain already opened by update_kstat (using *kc), verify everything went fine. */
+	if (kc == NULL)
+	{
+		ERROR ("zfs_arc_v2 plugin: kstat chain control structure not available.");
+		return (-1);
+	}
+#endif
+
+	return (0);
+} /* }}} int za_v2_init */
+
+void module_register (void)
+{
+	plugin_register_init ("zfs_arc_v2", za_v2_init);
+	plugin_register_read ("zfs_arc_v2", za_v2_read);
+} /* void module_register */
+
+/* vmi: set sw=8 noexpandtab fdm=marker : */
