#!/bin/sh
# THIS FILE IS RESERVED FOR THE EXCLUSIVE USE OF FREENAS CONFIG SYSTEM.
# Please edit /etc/rc.conf instead.

#-
# Copyright (c) 2010, 2011 iXsystems, Inc., All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL Jordan Hubbard OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#

. /etc/rc.freenas


http_ssl_enabled()
{
	local ssl=$(${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "
		SELECT
			stg_guiprotocol
		FROM
			system_settings
		WHERE
			stg_guiprotocol = 'https'
		ORDER BY
			-id
		LIMIT 1
	")

	if [ -n "${ssl}" ]
	then
		return 0
	fi

	return 1
}

ftp_tls_enabled()
{
	local ssl=$(${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "
		SELECT
			ftp_tls
		FROM
			services_ftp
		ORDER BY
			-id
		LIMIT 1
	")

	if [ "${ssl}" -gt "0" ]
	then
		return 0
	fi

	return 1
}

_interface_config()
{
	local saved_ifs="${IFS}"
	local IFS=\|
	local interface_id interface dodhcp ipv4addr ipv4netmask doipv6auto ipv6addr ipv6netmask options
	local lagg_id laggproto lagg_physnic lagg_deviceoptions
	local vlan_vint vlan_pint vlan_tag

	if [ `${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "SELECT COUNT(id) FROM network_interfaces"` = 0 ]; then
		IFS="${saved_ifs}"
		for interface in $(ifconfig -l)
		do
			if echo "${interface}"|egrep -q '^(bridge|epair|ipfw|lo)[0-9]+'
			then
				continue
			fi
			echo "ifconfig_${interface}=\"DHCP\""
		done
	fi

	local node
	local carp1_addr="169.254.10.20/32" carp2_addr="169.254.10.80/32"
	local carp1_skew carp2_skew
	local internal_ip internal_iface
	if ! is_freenas; then

		if [ "$(ha_mode)" = "MANUAL" ]; then
			# TODO: get from database if we are not echostream
		else
			node=$(ha_node)
		fi

		if [ "${node}" = "A" ]; then
			carp1_skew="20"
			carp2_skew="80"
			internal_ip="169.254.10.1"
		elif [ "${node}" = "B" ]; then
			carp1_skew="80"
			carp2_skew="20"
			internal_ip="169.254.10.2"
		else
			echo "# Could not determine system node"
		fi

		if [ -n "${carp1_skew}" ]; then
			if [ "$(ha_hardware)" = "ECHOSTREAM" ]; then
				internal_iface=$(pciconf -lv | grep 'card=0xa01f8086 chip=0x10d38086' | awk -F@ '{print $1}')
                                if [ "${internal_iface}" = "" ]; then
                                        internal_iface=$(ifconfig -l | tr -s " " "\n" | grep "^em" | sort -r | head -1)
                                fi
			elif [ "$(ha_hardware)" = "SBB" ]; then
				internal_iface="ix0"
			elif [ "$(ha_hardware)" = "ULTIMATE" ]; then
				internal_iface="igb1"
			fi
			echo "ifconfig_${internal_iface}=\"inet ${internal_ip}/24\""
			echo "ifconfig_${internal_iface}_alias0=\"inet vhid 10 advskew ${carp1_skew} alias ${carp1_addr}\""
			echo "ifconfig_${internal_iface}_alias1=\"inet vhid 20 advskew ${carp2_skew} alias ${carp2_addr}\""
		fi
	fi

	local IFS=\|
	# Note: ipv4/ipv6 are supposed in ip/masklen format.

	# Traverse the network interface table and generate rc.conf style
	# configuration.
	${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "SELECT id, int_interface, int_dhcp, int_ipv4address, int_ipv4address_b, int_v4netmaskbit, int_ipv6auto, int_ipv6address, int_v6netmaskbit, int_vip, int_vhid, int_pass, int_options FROM network_interfaces ORDER BY id" | \
	while read interface_id interface dodhcp ipv4addr ipv4addr_b ipv4netmask doipv6auto ipv6addr ipv6netmask int_vip int_vhid int_pass options; do
		if [ "$(ha_node)" = "B" ]; then
			ipv4addr=${ipv4addr_b}
		fi
		echo -n ifconfig_${interface}=\"
		if [ "${dodhcp}" = "1" ]; then
			echo -n "DHCP"
		elif [ -n "${ipv4addr}" ]; then
			echo -n "inet ${ipv4addr}/${ipv4netmask} "
		fi
		# Hook to support lagg(4) interfaces
		lagg_id=`${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "SELECT id FROM network_lagginterface WHERE lagg_interface_id = ${interface_id}"`
		if [ -n "${lagg_id}" ]; then
			laggproto=`${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "SELECT lagg_protocol FROM network_lagginterface WHERE lagg_interface_id = ${interface_id}"`
			echo -n " laggproto ${laggproto}"
			${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "SELECT lagg_physnic FROM network_lagginterfacemembers WHERE lagg_interfacegroup_id=${lagg_id} ORDER BY lagg_ordernum" | \
			while read lagg_physnic; do
				echo -n " laggport ${lagg_physnic}"
			done
		else
			if [ -n "${options}" ]; then
				echo -n " ${options}"
			fi
		fi
		echo \"

		if [ "${int_vip}" != "" ]; then
			if [ -n "${int_pass}" ]; then
				int_passopt=" pass ${int_pass}"
			else
				int_passopt=""
			fi
			if [ -f /usr/local/www/freenasUI/failover/notifier.py ]; then
				if [ $(LD_LIBRARY=/usr/local/lib /usr/local/bin/python /usr/local/www/freenasUI/middleware/notifier.py failover_status) = "MASTER" ]; then
					carp1_skew="1"
				fi
			fi
			echo "ifconfig_${interface}_alias0=\"vhid ${int_vhid} advskew ${carp1_skew}${int_passopt} alias ${int_vip}/32\""
			eval counter_${interface}=1

		fi

		local aliases has_ipv6
		aliases=$(${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "SELECT id, alias_vip, alias_v4address, alias_v4address_b, alias_v4netmaskbit, alias_v6address, alias_v6address_b, alias_v6netmaskbit FROM network_alias WHERE alias_interface_id = ${interface_id} ORDER BY id" | \
		while read alias_id v4vip v4addr v4addr_b v4netmask v6addr v6addr_b v6netmask; do
			eval counter=\${counter_${interface}:-0}
			if [ "$(ha_node)" = "B" ]; then
				v4addr=${v4addr_b}
				v6addr=${v6addr_b}
			fi
			if [ -n "${int_vhid}" -a -n "${v4vip}" ]; then
				echo "ifconfig_${interface}_alias${counter}=\"inet vhid ${int_vhid} advskew ${carp1_skew}${int_passopt} alias ${v4vip}/32\""
				counter=$((counter+1))
			fi
			if [ -n "${v4addr}" ]; then
				echo "ifconfig_${interface}_alias${counter}=\"inet ${v4addr}/${v4netmask}\""
				counter=$((counter+1))
			fi
			if [ -n "${v6addr}" ]; then
				echo "ifconfig_${interface}_alias${counter}=\"inet6 ${v6addr}/${v6netmask}\""
				counter=$((counter+1))
			fi
			eval "counter_${interface}=\${counter}"
		done)
		echo ${aliases}
		has_ipv6=$(echo ${aliases}|grep -c inet6)

		if [ "$doipv6auto" = "1" ]; then
			echo ifconfig_${interface}_ipv6=\"inet6 accept_rtadv auto_linklocal\"
                        echo rtsold_enable=\"YES\"
		else
			if [ -n "${ipv6addr}" ]; then
				echo ifconfig_${interface}_ipv6=\"inet6 ${ipv6addr}/${ipv6netmask} auto_linklocal\"
                        elif [ ${has_ipv6} -gt 0 ]; then
                                echo ifconfig_${interface}_ipv6=\"inet6 auto_linklocal\"
                        fi
		fi
		if [ -n "${lagg_id}" ]; then
			cloned_interfaces="${cloned_interfaces} ${interface}"
			echo "cloned_interfaces=\"${cloned_interfaces}\""
		fi
	done


	#
	${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "SELECT lagg_physnic, lagg_deviceoptions, lagg_interfacegroup_id FROM network_lagginterfacemembers ORDER BY lagg_ordernum" | \
	while read lagg_physnic lagg_deviceoptions lagg_gid; do
		lagg_intoptions=$(${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "SELECT int_options FROM network_interfaces INNER JOIN network_lagginterface ON network_interfaces.id=network_lagginterface.lagg_interface_id WHERE network_lagginterface.id=${lagg_gid}")
		echo "ifconfig_${lagg_physnic}=\"${lagg_intoptions} ${lagg_deviceoptions}\""
	done

	# Hook to support vlan interfaces
	${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "SELECT DISTINCT vlan_pint from network_vlan" | \
	while read vlan_pint; do
		echo -n vlans_${vlan_pint}=\"
		${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "SELECT vlan_vint from network_vlan WHERE vlan_pint = \"${vlan_pint}\"" | xargs echo -n
		echo \"
	done

	${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "SELECT vlan_vint, vlan_tag from network_vlan" | \
	while read vlan_vint vlan_tag; do
		echo create_args_${vlan_vint}=\"vlan\ ${vlan_tag}\"
	done
}

_host_config()
{
	local IFS=\|
	local hostname domainname nameserver1 nameserver2 nameserver3 ipv4gateway ipv6gateway netwait_enabled netwait_ip hostname_field
	if [ "$(ha_node)" = "B" ]; then
		hostname_field="gc_hostname_b"
	else
		hostname_field="gc_hostname"
	fi
	${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "SELECT ${hostname_field}, gc_domain, gc_nameserver1, gc_nameserver2, gc_nameserver3, gc_ipv4gateway, gc_ipv6gateway, gc_netwait_enabled, gc_netwait_ip FROM network_globalconfiguration ORDER BY -id LIMIT 1" | \
	while read -r hostname domainname nameserver1 nameserver2 nameserver3 ipv4gateway ipv6gateway netwait_enabled netwait_ip; do
		echo hostname=\"${hostname}.${domainname}\"
		if [ -n "${ipv4gateway}" ]; then
			echo defaultrouter=\"${ipv4gateway}\"
		fi
		if [ -n "${ipv6gateway}" ]; then
			echo ipv6_defaultrouter=\"${ipv6gateway}\"
		fi
		# Generate resolv.conf
		if [ -n "${nameserver1}" ]; then
			(echo search ${domainname}
			for ns in \
				"${nameserver1}" "${nameserver2}" \
				"${nameserver3}"
			do
				if [ -n "${ns:-}" ]; then
					echo "nameserver ${ns}"
				fi
			done) > /etc/resolv.conf
		fi

		if [ "${netwait_enabled}" = 1 ]; then
			echo netwait_enable=\"YES\"
			if [ -z "${netwait_ip}" ]; then
				if [ -n "${ipv4gateway}" ]; then
					netwait_ip=${ipv4gateway}
				elif [ -n "${ipv6gateway}" ]; then
					netwait_ip=${ipv6gateway}
				fi
			fi
			echo netwait_ip=\"${netwait_ip}\"
		fi
	done
}

# _bool_config /variable/ /table/ /field/
_bool_config()
{
	local IFS=\|
	local boolvalue value key
	if [ -n "$4" ]; then
		key="$4"
	else
		key="id"
	fi
	${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "SELECT $3 FROM $2 ORDER BY ${key} DESC LIMIT 1" | \
	while read boolvalue; do
		if [ "${boolvalue}" = "1" ]; then
			value="YES"
		else
			value="NO"
		fi
		echo $1=\"${value}\"
	done
}

# _count_config /variable/ /table/ /field/ /where/
_count_config()
{
	local count value
	count=`${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "SELECT COUNT($3) FROM $2 WHERE $3$4"`
	if [ "${count}" -gt "0" ]; then
		value="YES"
	else
		value="NO"
	fi
	echo $1=\"${value}\"
}

# _bool_svcconfig /variable/ /service_name/
_bool_svcconfig()
{
	local IFS=\|
	local boolvalue value
	${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "SELECT srv_enable FROM services_services WHERE srv_service='$2' ORDER BY id DESC LIMIT 1" | \
	while read boolvalue; do
		if [ "${boolvalue}" = "1" ]; then
			value="YES"
		else
			value="NO"
		fi
		echo $1=\"${value}\"
	done
}

# Grab static route configuration
_staticroute_config()
{
	local IFS=\|
	local id destination gateway interface static_routes

	${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "SELECT id, sr_destination, sr_gateway FROM network_staticroute;" | \
	while read -r id destination gateway; do
		echo route_freenas${id}=\"-net ${destination} ${gateway}\"
	done
	static_routes=$(${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "SELECT id FROM network_staticroute" | sed -e s/^/freenas/g | xargs echo)
	if [ -n "${static_routes:-}" ]; then
		echo static_routes=\"$static_routes\"
	fi
}

_nis_config() {
	local IFS=\|
	local nisdomain nisservers nissecure nismanycast

	${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "SELECT nis_domain, nis_servers, nis_secure_mode, nis_manycast FROM directoryservice_nis;" | \
	while read -r nisdomain nisservers nissecure nismanycast; do
		local nisflags="-S ${nisdomain}"

		echo "nisdomainname=\"${nisdomain}\""
		echo "nis_client_enable=\"YES\""

		if [ -n "${nisservers}" ]; then
			nisflags="${nisflags},${nisservers}"
		fi
		if [ "${nissecure}" = "1" ]; then
			nisflags="${nisflags} -s"
		fi
		if [ "${nismanycast}" = "1" ]; then
			nisflags="${nisflags} -m"
		fi

		echo "nis_client_flags=\"${nisflags}\""
	done
}

_nut_config() {
	local IFS=\|
	local boolvalue ups_identifier ups_mode ups_remotehost ups_remoteport
	${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "SELECT srv_enable FROM services_services WHERE srv_service='ups' AND srv_enable = 1 LIMIT 1" | \
	while read boolvalue; do
		${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "SELECT ups_mode, ups_remotehost, ups_remoteport, ups_identifier FROM services_ups" | \
		while read -r ups_mode ups_remotehost ups_remoteport ups_identifier; do
			if [ "${ups_mode}" = "master" ]; then
				echo "nut_enable=\"YES\""
				echo "nut_upslog_ups=\"${ups_identifier}\""
			else
				echo "nut_upslog_ups=\"${ups_identifier}@${ups_remotehost}:${ups_remoteport}\""
			fi
			echo "nut_upslog_enable=\"YES\""
			echo "nut_upsmon_enable=\"YES\""
		done
	done
}

_ssl_config()
{
	local ssl_list

	if http_ssl_enabled
	then
		ssl_list="${ssl_list} nginx"
	fi

	if ftp_tls_enabled
	then
		ssl_list="${ssl_list} proftpd"
	fi

	ssl_list=$(echo ${ssl_list}|xargs)
	echo "ixssl_list=\"${ssl_list}\""
}

_sssd_config()
{
	sssd_enable="NO"
	if dirsrv_enabled ldap ; then
		sssd_enable="YES"
	fi
	if dirsrv_enabled activedirectory; then
		local ad_unix=$(${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "
			SELECT
				ad_unix_extensions
			FROM
				directoryservice_activedirectory
			ORDER BY
				-id
			LIMIT 1
		")
		if [ "${ad_unix}" = "1" ]; then
			sssd_enable="YES"
		fi
	fi
	echo "sssd_enable=\"${sssd_enable}\""
}

_gen_conf()
{
	## First, import network interface configuration.
	_interface_config
	_host_config
	_staticroute_config

	## Daemons
	_bool_svcconfig netatalk_enable afp
	_bool_svcconfig proftpd_enable ftp
	_bool_svcconfig nfs_server_enable nfs
	_bool_svcconfig rpc_lockd_enable nfs
	_bool_svcconfig rpc_statd_enable nfs
	_bool_svcconfig mountd_enable nfs
	_bool_svcconfig nfsd_enable nfs
	_bool_svcconfig rpcbind_enable nfs
	_bool_svcconfig rsyncd_enable rsync
	_bool_svcconfig snmpd_enable snmp
	_bool_svcconfig sshd_enable ssh
	_bool_svcconfig inetd_enable tftp
	_bool_svcconfig inadynmt_enable dynamicdns
	_bool_svcconfig smartd_enable smartd
	_bool_svcconfig ladvd_enable lldp
	_bool_svcconfig ctld_enable iscsitarget
	_bool_svcconfig apache24_enable webdav


	_bool_svcconfig samba_server_enable cifs
	if ! dirsrv_enabled domaincontroller ; then
		_bool_svcconfig smbd_enable cifs
		_bool_svcconfig nmbd_enable cifs
		_bool_svcconfig winbindd_enable cifs
	fi

	if dirsrv_enabled nis; then
		_nis_config
	fi

	if srv_enabled snmp; then
		echo "snmpd_conffile=\"/etc/local/snmpd.conf\""
		echo "snmpd_flags=\"-Ls5d\""
	fi

	_sssd_config
	_nut_config

	# Workaround: we don't enable ZFS by default but still want /etc/zfs/exports
	# be exist for mountd(8)
	if [ ! -r /etc/zfs/exports ]; then
		touch /etc/zfs/exports
	fi

	if [ "$(${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "SELECT srv_enable from services_services WHERE srv_service = 'nfs'")" = 1 ]; then

		# NFS service is enabled
		if [ "$(${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "SELECT nfs_srv_v4 FROM services_nfs")" = 1 ]; then
			# NFSv4 is enabled
			echo "nfsv4_server_enable=\"YES\""
			if [ "$(${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "SELECT nfs_srv_v4_v3owner FROM services_nfs")" = 1 ]; then
				# NFSv3 ownership style for NFSv4 is selected.  Note this is mutually incompatible
				# with the >16 group support.
				echo "nfsuserd_enable=\"NO\""
				sysctl vfs.nfsd.enable_stringtouid=1
			else
				echo "nfsuserd_enable=\"YES\""
				if [ "$(${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "SELECT nfs_srv_16 FROM services_nfs")" = 1 ]; then
					# >16 group support
					echo "nfsuserd_flags=\"-manage-gids\""
				fi
			fi
		else
			# NFSv4 is not enabled
			if [ "$(${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "SELECT nfs_srv_16 FROM services_nfs")" = 1 ]; then
				# we use nfsuserd to support more than 16 groups
				echo "nfsuserd_enable=\"YES\""
				echo "nfsuserd_flags=\"-manage-gids\""
			fi
			echo "nfsv4_server_enable=\"NO\""
		fi

		if [ "$(${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "SELECT nfs_srv_v4_krb FROM services_nfs")" = 1 ]; then
			# NFSv4 is kerberos only
			echo "gssd_enable=\"YES\""
		else
			if [ "$(${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "SELECT COUNT() FROM directoryservice_kerberoskeytab")" = 0 ]; then
				# There are no keytabs in the database
				echo "gssd_enable=\"NO\""
			else
				# Keytabs found.  Turn on kerberos support for NFS
				# Note that in this case kerberos won't be *required* for NFS
				# but it will work.
				echo "gssd_enable=\"YES\""
			fi
		fi
	fi

	_count_config zfs_enable storage_volume vol_fstype =\'ZFS\'
	_count_config fusefs_enable storage_volume vol_fstype =\'NTFS\'
	_count_config fusefs_safe storage_volume vol_fstype =\'NTFS\'
	_count_config powerd_enable system_advanced adv_powerdaemon =1
	_count_config ix_diagnose_enable system_advanced adv_uploadcrash =1
	if ! is_freenas; then
		if [ "$(/usr/local/bin/python /usr/local/www/freenasUI/middleware/notifier.py failover_licensed 2> /dev/null)" = "True" ]; then
			echo "failover_enable=\"YES\""
			echo "pf_enable=\"YES\""
		else
			echo "failover_enable=\"NO\""
		fi
		local failover="$(/usr/local/bin/python /usr/local/www/freenasUI/middleware/notifier.py failover_status 2> /dev/null)"
		if [ "${failover}" != "BACKUP" ]; then
			echo "collectd_enable=\"YES\""
		fi
	else
		echo "collectd_enable=\"YES\""
		echo "failover_enable=\"NO\""
	fi


	if [ "$(${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "SELECT adv_consolescreensaver FROM system_advanced ORDER BY -id LIMIT 1")" = 1 ]; then
		echo "saver=\"daemon\""
	fi

	local nonroot mountdflags="-l -rS" ip nfsips mountdport statdport lockdport

	nfsips=$(${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "SELECT nfs_srv_bindip FROM services_nfs ORDER BY -id LIMIT 1" | tr "," \\n | \
	while read -r ip; do
		if [ -n "${ip}" ]; then
			echo -n "-h ${ip} "
		fi
	done)

	# set NFS server options
	local IFS=\|
	local numservers nfsudp
	${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "SELECT nfs_srv_servers, nfs_srv_udp FROM services_nfs ORDER BY id DESC LIMIT 1" | \
	while read numservers nfsudp; do
		if [ "${nfsudp}" = 0 ]; then
			echo "nfs_server_flags=\"-t -n ${numservers} ${nfsips}\""
		else
			echo "nfs_server_flags=\"-t -u -n ${numservers} ${nfsips}\""
		fi
	done

	${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "SELECT nfs_srv_allow_nonroot, nfs_srv_mountd_port, nfs_srv_rpcstatd_port, nfs_srv_rpclockd_port FROM services_nfs ORDER BY -id LIMIT 1" | \
	while read -r nonroot mountdport statdport lockdport; do
		if [ "${nonroot}" = 1 ]; then
			mountdflags="${mountdflags}n"
		fi
		if [ -n "${mountdport}" ]; then
			mountdflags="${mountdflags} -p ${mountdport}"
		fi
		if [ -n "${statdport}" ]; then
			statdport="-p ${statdport}"
		fi
		if [ -n "${lockdport}" ]; then
			lockdport="-p ${lockdport}"
		fi
		if [ -n "${nfsips}" ]; then
			mountdflags="${mountdflags} ${nfsips}"
			echo "rpcbind_flags=\"${nfsips}\""
		fi
		echo "rpc_statd_flags=\"${nfsips}${statdport}\""
		echo "rpc_lockd_flags=\"${nfsips}${lockdport}\""
		echo "mountd_flags=\"${mountdflags}\""
	done

	local smartdint
	${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "SELECT smart_interval FROM services_smart ORDER BY id DESC LIMIT 1" | \
	while read smartdint; do
		inter=$(echo "${smartdint}*60"|/usr/bin/bc)
		echo "smartd_flags=\"-i ${inter}\""
	done

	_ssl_config

	local kbdmap
	${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "SELECT stg_kbdmap FROM system_settings ORDER BY -id LIMIT 1" | \
	while read -r kbdmap; do
		if [ -n "${kbdmap}" ]; then
			echo "keymap=\"${kbdmap}\""
		fi
	done

	echo "geli_devices=\"`${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "SELECT encrypted_provider FROM storage_encrypteddisk e JOIN storage_volume v ON e.encrypted_volume_id = v.id WHERE v.vol_encrypt=1;" | \
		tr \\\n \  `\""
	${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "SELECT e.encrypted_provider,v.vol_encryptkey FROM storage_encrypteddisk e JOIN storage_volume v ON e.encrypted_volume_id = v.id WHERE v.vol_encrypt=1;" | \
	while read -r provider key; do
		_provider=`echo ${provider}|tr '/-' '_'`
		echo "geli_${_provider}_flags=\"-p -k /data/geli/${key}.key\""
	done

	${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "SELECT lldp_intdesc, lldp_country, lldp_location FROM services_lldp ORDER BY -id LIMIT 1" | \
	while read -r lldp_intdesc lldp_country lldp_location; do
		echo -n "ladvd_flags=\"-a"
		[ "${lldp_intdesc}" = 1 ] && echo -n " -z"
		[ -n "${lldp_country}" ] && echo -n " -c ${lldp_country}"
		[ -n "${lldp_location}" ] && echo -n " -l \\\"${lldp_location}\\\""
		echo "\""
	done

	if is_freenas; then
		echo "ataidle_enable=\"YES\""
		# Needed to use pbi repositories
		echo "pbid_enable=\"YES\""
		echo "vboxnet_enable=\"YES\""
		# Bug #7337 -- blacklist AMD systems for now
		if /sbin/sysctl hw.model | grep -q AMD; then
			echo "watchdogd_enable=\"NO\""
		else
			if /usr/local/sbin/dmidecode -s baseboard-product-name | grep -q X9DR3-F; then
				echo "watchdogd_enable=\"NO\""
			else
				echo "watchdogd_enable=\"YES\""
			fi
		fi
	else
		echo "ataidle_enable=\"NO\""
		echo "watchdogd_enable=\"NO\""
	fi

	local tun_var tun_value
	${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "SELECT tun_var, tun_value FROM system_tunable WHERE tun_enabled = 1 AND tun_type = 'rc' ORDER BY id" | \
	while read -r tun_var tun_value; do
		echo "${tun_var}=\"${tun_value}\""
	done

	# FreeNAS 9.10 uses zfsd
	echo "zfsd_enable=\"YES\""
}

# Regenerate stale caches of rc.conf data.  We run multiple time
# as part of the boot process, and this helps.  It also provides
# a useful file to look at for debugging.
#
# Previously mtime was being used to invalidate the cache
# However this solution could not deal with backward date changes
_NEWSUM=$(md5 -q ${FREENAS_CONFIG})
_OLDSUM=$(cat ${FREENAS_CONFIG_MD5} 2> /dev/null)
if [ ! "${_NEWSUM}" = "${_OLDSUM}" -a ! -f "${NEED_UPDATE_SENTINEL}" ]; then
	_gen_conf > ${FREENAS_RC}
	echo ${_NEWSUM} > ${FREENAS_CONFIG_MD5}
fi

if [ -f ${FREENAS_RC} ]; then
	. ${FREENAS_RC}
fi
